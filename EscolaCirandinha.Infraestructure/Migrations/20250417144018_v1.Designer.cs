// <auto-generated />
using System;
using EscolaCirandinha.Infraestructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EscolaCirandinha.Infraestructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250417144018_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.Aluno", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TurmaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Alunos");
                });

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.AlunoAtividade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlunoId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AtividadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Nota")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("AlunoId1");

                    b.HasIndex("AtividadeId");

                    b.ToTable("AlunoAtividades");
                });

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.Atividade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avaliacao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("NotaMaxima")
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid?>("ProfessorMateriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TurmaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorMateriaId");

                    b.HasIndex("TurmaId");

                    b.ToTable("Atividades");
                });

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.Coordenador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Coordenadores");
                });

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.Materia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Materias");
                });

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.Professor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Professores");
                });

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.ProfessorMateria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MateriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MateriaId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("ProfessorMaterias");
                });

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.Turma", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.ToTable("Turmas");
                });

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.Aluno", b =>
                {
                    b.HasOne("EscolaCirandinha.Domain.Entities.Turma", "Turma")
                        .WithMany("Alunos")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EscolaCirandinha.Domain.Shared.ValueObjects.DadosPessoais", "DadosAluno", b1 =>
                        {
                            b1.Property<Guid>("AlunoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Cpf")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("nvarchar(11)");

                            b1.Property<DateTime>("DataNascimento")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("AlunoId");

                            b1.ToTable("Alunos");

                            b1.WithOwner()
                                .HasForeignKey("AlunoId");
                        });

                    b.OwnsOne("EscolaCirandinha.Domain.Shared.ValueObjects.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("AlunoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Bairro")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Cep")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("nvarchar(8)");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<int>("Numero")
                                .HasColumnType("int");

                            b1.Property<string>("Rua")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.HasKey("AlunoId");

                            b1.ToTable("Alunos");

                            b1.WithOwner()
                                .HasForeignKey("AlunoId");
                        });

                    b.OwnsOne("EscolaCirandinha.Domain.Shared.ValueObjects.Responsavel", "Responsavel", b1 =>
                        {
                            b1.Property<Guid>("AlunoId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("AlunoId");

                            b1.ToTable("Alunos");

                            b1.WithOwner()
                                .HasForeignKey("AlunoId");

                            b1.OwnsOne("EscolaCirandinha.Domain.Shared.ValueObjects.DadosPessoais", "Mae", b2 =>
                                {
                                    b2.Property<Guid>("ResponsavelAlunoId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Cpf")
                                        .IsRequired()
                                        .HasMaxLength(11)
                                        .HasColumnType("nvarchar(11)");

                                    b2.Property<DateTime>("DataNascimento")
                                        .HasColumnType("datetime2");

                                    b2.Property<string>("Nome")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)");

                                    b2.HasKey("ResponsavelAlunoId");

                                    b2.ToTable("Alunos");

                                    b2.WithOwner()
                                        .HasForeignKey("ResponsavelAlunoId");
                                });

                            b1.OwnsOne("EscolaCirandinha.Domain.Shared.ValueObjects.DadosPessoais", "Pai", b2 =>
                                {
                                    b2.Property<Guid>("ResponsavelAlunoId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Cpf")
                                        .IsRequired()
                                        .HasMaxLength(11)
                                        .HasColumnType("nvarchar(11)");

                                    b2.Property<DateTime>("DataNascimento")
                                        .HasColumnType("datetime2");

                                    b2.Property<string>("Nome")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)");

                                    b2.HasKey("ResponsavelAlunoId");

                                    b2.ToTable("Alunos");

                                    b2.WithOwner()
                                        .HasForeignKey("ResponsavelAlunoId");
                                });

                            b1.Navigation("Mae")
                                .IsRequired();

                            b1.Navigation("Pai");
                        });

                    b.Navigation("DadosAluno")
                        .IsRequired();

                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("Responsavel")
                        .IsRequired();

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.AlunoAtividade", b =>
                {
                    b.HasOne("EscolaCirandinha.Domain.Entities.Aluno", null)
                        .WithMany("AlunoAtividades")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EscolaCirandinha.Domain.Entities.Aluno", "Aluno")
                        .WithMany()
                        .HasForeignKey("AlunoId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EscolaCirandinha.Domain.Entities.Atividade", "Atividade")
                        .WithMany("AlunoAtividades")
                        .HasForeignKey("AtividadeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Atividade");
                });

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.Atividade", b =>
                {
                    b.HasOne("EscolaCirandinha.Domain.Entities.ProfessorMateria", null)
                        .WithMany("Atividades")
                        .HasForeignKey("ProfessorMateriaId");

                    b.HasOne("EscolaCirandinha.Domain.Entities.Turma", "Turma")
                        .WithMany("Atividades")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.Coordenador", b =>
                {
                    b.OwnsOne("EscolaCirandinha.Domain.Shared.ValueObjects.DadosPessoais", "DadosCoordenador", b1 =>
                        {
                            b1.Property<Guid>("CoordenadorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Cpf")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("nvarchar(11)");

                            b1.Property<DateTime>("DataNascimento")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("CoordenadorId");

                            b1.ToTable("Coordenadores");

                            b1.WithOwner()
                                .HasForeignKey("CoordenadorId");
                        });

                    b.Navigation("DadosCoordenador")
                        .IsRequired();
                });

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.Professor", b =>
                {
                    b.OwnsOne("EscolaCirandinha.Domain.Shared.ValueObjects.DadosPessoais", "DadosProfessor", b1 =>
                        {
                            b1.Property<Guid>("ProfessorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Cpf")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("nvarchar(11)");

                            b1.Property<DateTime>("DataNascimento")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("ProfessorId");

                            b1.ToTable("Professores");

                            b1.WithOwner()
                                .HasForeignKey("ProfessorId");
                        });

                    b.Navigation("DadosProfessor")
                        .IsRequired();
                });

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.ProfessorMateria", b =>
                {
                    b.HasOne("EscolaCirandinha.Domain.Entities.Materia", "Materia")
                        .WithMany("ProfessorMaterias")
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EscolaCirandinha.Domain.Entities.Professor", "Professor")
                        .WithMany("ProfessorMaterias")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Materia");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.Turma", b =>
                {
                    b.HasOne("EscolaCirandinha.Domain.Entities.Professor", "Professor")
                        .WithMany("Turmas")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.Aluno", b =>
                {
                    b.Navigation("AlunoAtividades");
                });

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.Atividade", b =>
                {
                    b.Navigation("AlunoAtividades");
                });

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.Materia", b =>
                {
                    b.Navigation("ProfessorMaterias");
                });

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.Professor", b =>
                {
                    b.Navigation("ProfessorMaterias");

                    b.Navigation("Turmas");
                });

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.ProfessorMateria", b =>
                {
                    b.Navigation("Atividades");
                });

            modelBuilder.Entity("EscolaCirandinha.Domain.Entities.Turma", b =>
                {
                    b.Navigation("Alunos");

                    b.Navigation("Atividades");
                });
#pragma warning restore 612, 618
        }
    }
}
